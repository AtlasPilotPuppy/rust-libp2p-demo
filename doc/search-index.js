var searchIndex = JSON.parse('{\
"p2p":{"doc":"This module demonstrates using Rust with libp2p and tokio …","t":[13,4,13,7,3,3,4,3,3,6,13,7,13,13,13,6,17,7,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,12,11,11,12,5,5,12,5,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12],"n":["ALL","EventType","Input","KEYS","Memo","MemoBehaviour","MemoMode","MemoRequest","MemoResponse","Memos","One","PEER_ID","Publish","PublishResponse","Response","Result","STORAGE_FILE_PATH","TOPIC","add_published_memo","addresses_of_peer","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_new_memo","data","deserialize","deserialize","deserialize","deserialize","floodsub","fmt","fmt","fmt","fmt","from","from","from","from","from","from","handle_create_memo","handle_list_memos","handle_list_peers","handle_publish_memos","id","inject_address_change","inject_connected","inject_connection_closed","inject_connection_established","inject_dial_failure","inject_disconnected","inject_event","inject_event","inject_event","inject_expired_external_addr","inject_expired_listen_addr","inject_listen_failure","inject_listener_closed","inject_listener_error","inject_new_external_addr","inject_new_listen_addr","inject_new_listener","into","into","into","into","into","into","main","mdns","memo","mode","mode","new_handler","poll","public","publish_memo","read_local_memos","receiver","respond_with_public_memos","response_sender","serialize","serialize","serialize","serialize","title","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","write_local_memos","0","0","0"],"q":["p2p","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","p2p::EventType","","p2p::MemoMode"],"d":["","EventType is an enum to handle responses from peers It …","","","The memo type is the foundation of what is stored. Memos …","MemoBehaviour - using the derive macro to derive …","MemoMode is an enum that is used for matching the types of …","Struct to denote a memo request. It contains a reference …","The MemoResponse Object contains the mode of the response …","","","","","","","","","","function to add a published memo.","","","","","","","","","","","","","","","","","Create a new Memo entry in Memos and persist it to the …","","","","","","","","","","","","","","","","","Handle the request to create a new Memo and add persist it …","Handle the peer response for Memos.","Log list of unique peers.","Handle the request to publish Memo","","","","","","","","","implementation of inject_event from the trait","","","","","","","","","","","","","","","","Main Tokio event loop. This handles the creation of the …","","","","","","","","async function to publish a local Memo after setting its …","async function to read local memos","","Function to respond with public memos.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Persist Memos to local json.","","",""],"i":[1,0,2,0,0,0,0,0,0,0,1,0,1,1,2,0,0,0,0,3,4,2,4,1,5,6,3,2,4,1,5,6,3,4,4,0,6,4,1,5,6,3,4,1,5,6,2,4,1,5,6,3,0,0,0,0,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,4,1,5,6,3,0,3,5,5,6,3,3,4,0,0,6,0,3,4,1,5,6,4,4,2,4,1,5,6,3,2,4,1,5,6,3,2,4,1,5,6,3,2,4,1,5,6,3,0,7,8,9],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["memo",3],["unboundedsender",3,[["memoresponse",3]]],["string",3]]],[[["",0],["peerid",3]],["vec",3,[["multiaddr",3]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["memo",3]],[[["",0],["",0]]],[[["str",0],["str",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]]],[[["str",0],["swarm",3]]],[[["swarm",3]]],[[["str",0],["swarm",3]]],null,[[["",0],["peerid",3],["connectionid",3],["connectedpoint",4],["connectedpoint",4]]],[[["",0],["peerid",3]]],[[["",0],["peerid",3],["connectionid",3],["connectedpoint",4]]],[[["",0],["peerid",3],["connectionid",3],["connectedpoint",4],["option",4,[["vec",3]]]]],[[["",0],["option",4,[["peerid",3]]],["dialerror",4]]],[[["",0],["peerid",3]]],[[["",0],["peerid",3],["connectionid",3]]],[[["",0],["floodsubevent",4]]],[[["",0],["mdnsevent",4]]],[[["",0],["multiaddr",3]]],[[["",0],["listenerid",3],["multiaddr",3]]],[[["",0],["multiaddr",3],["multiaddr",3]]],[[["",0],["listenerid",3],["result",4,[["error",3]]]]],[[["",0],["listenerid",3],["error",8]]],[[["",0],["multiaddr",3]]],[[["",0],["listenerid",3],["multiaddr",3]]],[[["",0],["listenerid",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["",0]]],[[["",0],["context",3]],["poll",4,[["networkbehaviouraction",4]]]],null,[[["usize",0]]],[[]],null,[[["unboundedsender",3,[["memoresponse",3]]],["string",3]]],null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]]],null,null,null],"p":[[4,"MemoMode"],[4,"EventType"],[3,"MemoBehaviour"],[3,"Memo"],[3,"MemoRequest"],[3,"MemoResponse"],[13,"Response"],[13,"Input"],[13,"One"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};